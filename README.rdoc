= Service component

The service component aggregates re-usable aspects of the Hetzner architecture in a single, low-defect component at the center of the Hetzner architecture. The service component is used to inject services into and to serve these services, facilitating interaction in standardized ways with the other Hetzner architecture building blocks.

The domain analysis for the service component can be viewed here: https://docs.google.com/presentation/d/1fYO0-NufskpMllxtHv_TnbDurqczdskl0KvIMk7nk-4/edit#slide=id.gb65163f25_0_0

== Non-functional requirements
* {file:features/nfr_security.feature Security NFRs} when fulfilling the security architectural viewpoint.
* {file:features/nfr_performance.feature Performance NFRs} when fulfilling the performance architectural viewpoint.
* {file:features/nfr_quality.feature Quality NFRs} when fulfilling the quality architectural viewpoint.

== Features
=== Bootstrapping
* {file:features/bootstrap_with_service_identifier.feature bootstrapping with a service identifier}
* {file:features/bootstrap_with_service_configuration.feature bootstrapping with a configuration}
* {file:features/bootstrap_with_configuration_service.feature boostrapping with a configuration service} URI, and access token
* {file:features/bootstrap_with_service_registry.feature bootstrapping with a service registry} URI
* {file:features/bootstrap_with_authentication_provider.feature bootstrapping with an authentication provider} URI
* {file:features/bootstrap_with_execution_environment.feature bootstrapping with an execution environment} indicator (one of development or production)
* {file:features/bootstrap_with_session_configuration.feature bootstrapping with a session secret and key}
* {file:features/bootstrap_with_ca.feature bootstrapping with a certificate authority configuration}
* {file:features/bootstrap_with_time.feature bootstrapping with a reliable time source}
* {file:features/bootstrap_with_auditor_configuration.feature bootstrapping with auditor configuration}
* {file:features/bootstrap_with_auditing_provider_configuation.feature bootstrapping with auditing provider configuation}

=== Dynamic Configuration and Administration
* Update revocation lists (Pending stretch goal)
* Configuration updates (Pending stretch goal)
* Set auditing level (Pending stretch goal)
* Divert to DSS (Pending stretch goal)
* Enable AB testing (Pending stretch goal)
* Dial up multirouting (Pending stretch goal)

=== Execution environment behaviour
* {file:features/execution_environment_development.feature Development behaviour} when executing in the 'development' execution environment
* {file:features/execution_environment_development.feature Test behaviour} when executing in the 'test' execution environment
* {file:features/execution_environment_test.feature Production behaviour} when executing in the 'production' execution environment

=== Session support
* {file:features/sessions.feature Session management} when engaging client sessions
* {file:features/sessions.feature Session security} when engaging client sessions

=== Configuration service
* {file:features/boostrap_configuration_precedence.feature Precedence of configuration} when supplying multiple sources of configuration
* {file:features/bootstrap_with_configuration_service.feature bootstrapping a configuration service} for when configuring for production
* {file:features/bootstrap_with_configuration_file.feature bootstrapping a configuration file} for when configuring for development
* {file:features/bootstrap_with_configuration_service.feature retrieving configuration} from a configuration service using the service identifier and credentials injected

=== Environment configuration
* {file:features/boostrap_environment_precedence.feature Precedence of environment} when supplying multiple sources of environment
* {file:features/bootstrap_with_environment.feature bootstrapping from the environment} when bootstrapping the service component
* {file:features/bootstrap_with_environment_file.feature bootstrapping from an environment file} when bootstrapping the service component

=== Service registry
* {file:features/find_service_uri.feature finding service URIs} given a service identifier when requiring a service to fulfill a workflow
* {file:features/find_service_uri.feature finding the best service URI} given a service identifier when the longer lookup is acceptable given the need to find the best URI
* {file:features/service_registry_client.feature access to a full-featured} service registry client when needing to access the full suite of service registry functionality
* {file:features/service_registry_client.feature Injecting a pluggable} service registry provider

Note that the service registry feature suite in this service component only specifies the basic interaction with the service registry.  Implicitly this basic feature mapping extends to all service registry features as specified by the service registry client itself.

=== Authentication
* {file:features/authentication_check.feature Indicating} whether a user or service has authenticated when needing to access control actions, given a request
* {file:features/authentication_check.feature Identifying} the authenticated identity by identifier when needing to know who or what authenticated, given a request
* {file:features/authentication_dev_mode.feature Development authentication} when developing, facilitating development workflows
* {file:features/authentication_allow.feature Allowing} access to authorization if authenticated, given a service
* {file:features/authentication_deny.feature Denying} access to authorization if not authenticated, given a service
* {file:features/authentication_allow.feature Authenticating humans} when humans need access to services
* {file:features/authentication_allow.feature Authenticating services} when service components need access to services
* {file:features/authentication_delegation.feature Authenticating delegation} when service components are acting on behalf of humans
* {file:features/authentication_pluggable.feature Injecting a pluggable} authentication provider

=== Authorization
* {file:features/authorization_policy.feature Applying policies} when authorizing a service
* {file:features/authorization_policy.feature Allowing} access to controllers if authorized, given a service
* {file:features/authorization_policy.feature Denying} access to controllers if not authorized, given a service
* {file:features/authorization_dev_mode.feature Development authorizing} when developing, facilitating development workflows
* {file:features/authorization_pluggable.feature Injecting a pluggable} authorization provider

=== Auditing
* {file:features/auditing_report.feature Reporting of audit event} when a noteworthy event occurs
* {file:features/auditing_levels.feature Levels of auditing} when filtering auditing information
* {file:features/auditing_timestamp.feature Timestamping of auditing events} when reporting audit events
* {file:features/auditing_levels.feature Categorization of auditing} when categorizing auditing information
* {file:features/auditing_optional_fields.feature Support optional fields} when reporting auditing events
* {file:features/auditing_buffering.feature Support audit buffering} when failing to audit to an auditor
* {file:features/auditing_pluggable.feature Remote auditing} when centralized auditing is required
* {file:features/auditing_pluggable.feature Injecting a pluggable} auditing provider
* {file:features/auditing_flow_identifiers.feature Managing flow identifiers} when providing traceability of auditing events
* {file:features/auditing_service_component_information.feature Include service component information} when auditing services on a service component
* {file:features/auditing_reporting_to_auditor.feature Reporting to auditor} when possible and the buffer is not empty
* {file:features/auditing_service_component_shutdown.feature Shutdown flushing buffered audit events} when the service component shuts down (Pending stretch goal)

=== Certificate authority
* {file:features/ca_verify.feature Verifying a certificate} from a CA when authenticating a request
* {file:features/ca_verify.feature Access to CA public cert} in its trust store when verifying certificates
* {file:features/ca_verify.feature Honoring revokation} when verifying certificates

=== Routing stack
* {file:features/router_match.feature Matching} routes unambiguously when servicing requests
* {file:features/router_match.feature RESTful} routing is not designed out
* {file:features/router_stack_decryption.feature Decrypting requests} at appropriate points when encrypted requests have been received
* {file:features/router_stack_verify.feature Verifying certificates} at appropriate points when signed requests have been received
* {file:features/router_stack.feature Handling prioritized} using the chain of responsibility pattern
* {file:features/router_stack.feature Firstly handing over to authentication} when servicing human requests
* {file:features/router_stack.feature Firstly handing over to authentication} when servicing service component requests
* {file:features/router_stack.feature Secondly validating} requests against route WADL specifications
* {file:features/router_stack.feature Thirdly handing over to authorization} when servicing requests
* {file:features/router_stack.feature Fourthly handing over to controllers} in a router action when actioning requests
* {file:features/router__stack.feature Fifthly handing over to views} in a router action when rendering responses
* {file:features/router_lexicon.feature Rendering WADL} lexicons for all available routes
* {file:features/router_lexicon.feature Rendering WADL} lexicon when requested for a route
* {file:features/router_lexicon.feature Allowing validated} requests to reach controllers
* {file:features/router_lexicon.feature Denying invalid} requests from reaching controllers
* {file:features/route_configuration_signed.feature Understanding signed} route configuration
* {file:features/route_configuration_signed.feature Understanding unsigned} route configuration
* {file:features/route_configuration_signed.feature Understanding authorized} route configuration
* {file:features/route_configuration_signed.feature Understanding unauthorized} route configuration
* {file:features/route_configuration_signed.feature Understanding facilitated view} rendering
* {file:features/route_configuration_signed./feature Rendering error messages} for unmatched routes

== Features in support of development. Quality requirement: TDD
=== Model View Controller
* {file:spec/lib/web/controllers/configured_controller_spec.rb Controller} base class including configurability
* {file:spec/lib/web/views/html_spec.rb HTML} view rendering HTML
* {file:spec/lib/web/views/haml_spec.rb HAML} view rendering HAML
* {file:spec/lib/web/views/erb_spec.rb ERB} base rendering ERB
* {file:spec/lib/web/views/json_spec.rb JSON} base rendering JSON
* {file:spec/lib/web/views/xml_spec.rb XML} base rendering XML
* {file:spec/lib/web/models/configured_model_spec.rb Model} base class including configurability
* {file:spec/lib/web/models/model_factory.feature Factory} for creating models from injection via configuration

== Features in support of development. Quality requirement: Framework selection
=== Web server
* Web server that is configurable
* Middleware support for the web server

== Tools in support of development. Quality requirement: Ad hoc
=== Service tool chain
* Packaging tools when packaging controller, view, model and meta into a service
* Creation tools when creating services
* Extraction tools when removing services from the web application
* Injection tools when injecting services into the web application
* Debug launch of the web server with services when debugging
* Production build tools to produce a build of the web server with services when wanting to release builds into production

== Dependencies
The service component depends on:
* bootstrap configuration
* a service registry client
* a configuration service client
* an authentication implementation
* an authorization implementation
* a SMAAK implementation
* an auditing implementation
* a Certificate Authority client
* A routing stack
* An MVC framework implementation
* A framework for injecting providers
* A tool chain for injecting services
* A tool for building releases
* A web server or container suite

== Usage
This feature suite and specification can be used to vet service component architectural building block implementations.

A reference implementation can be found here: https://gitlab1.jnb2.host-h.net/hetznerZA/soar_sc

Write an IUT adapter for your implementation, and tell the orchestrator to use it for 'development' orchestration, then execute the specification suite. For the SoarSc reference implementation, execute one of the following:

  TEST_ORCHESTRATION_PROVIDER=stub bundle exec cucumber features

For TFA and production implementations, first start the service component, and have it reload automatically:

  cd $SOAR_DIR
  export SOAR_TECH=rackup
  bundle install
  ./keep_running.sh

  SOAR_DIR=path/to/your/implementaion TEST_ORCHESTRATION_PROVIDER=tfa bundle exec cucumber features
  SOAR_DIR=path/to/your/implementaion TEST_ORCHESTRATION_PROVIDER=production bundle exec cucumber features

Soft-link rspec suites for the Model View Controller test seams to the spec/ directory, and then run:

  bundle exec rspec -cfd spec

=== Workflows

==== My team wants to build and release a service into the Hetzner architecture:

Using the reference implementation (soar_sc) the workflows are described here: https://docs.google.com/document/d/1eCVcmOcQc-aYcxWMhOkrnVBx-ihRLSayfiIrUEwpJx0/edit


=== Debugging pointers

==== Getting byebug shell access on the soar_sc instance

Occasionally it is very useful to get shell access on the service in order to debug something.  This can be problamatic since the BDD test suite that creates that exact situation controlls the configuration and execution of the service component in a backgrounded process.  Therefore shell access is not possible.

Steps for getting shell access:
1. Checkout and run the BDD test suite on your workstation outside of docker.  Normally docker is used to run on CI and can also be used to run tests on a workstation but you need to be able to run the service and execute the tests on your workstation directly to get shell access.
2. Place a byebug breakpoint in the code that will be hit by the service component
3. Place a byebug breakpoint in the BDD test suite that will halt the test suite just after bootstrapping and starting up the service. Therefore before the line "detail = get_status_detail" in soar_sc_implementation
4. Comment out the line "./keep_running.sh > /dev/null 2>&1 &" in run_bdd_tests.sh to prevent the background job trying to fire up the service all the time.
5. Run the test suite which will halt at the byebug breakpoint set in step 3
6. Run the test suite in another terminal "export SOAR_TECH=debug; ./soar_tech.sh; rvm use .; RACK_ENV=development ./run.sh"
7. Now we have options of hitting the service manually using curl in another terminal or letting the test suite continue running and hitting the endpoint for you.
7.1 curl "http://dev:dev@127.0.0.1:9393/service-registry-client-command-and-control"
7.2 Or simply press c on the breakpoint set in step 3
8. If all went well you should be hitting the breakpoint set in step 2.  Go forth and debug!
